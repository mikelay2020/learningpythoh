API

skeleton - дерево компании, имеет уникальный ID.
ring - это кольцо, оно же тикет, таск и тд 
power - рабочая сила, которая может делать работу, в базовом варианте человек (сотрудник)

1. createSkeleton - создает структуру (дерево), и первое кольцо
Вход:
User_ID - кто создает структуру (основатель)
Text - описание первого кольца 
Выход:
Skeleton_ID - ID для всей структуры 
Ring_ID - ID для первого кольца

create table "skeleton (
ID - integer primary auto increment 
Text - text
Deleted - boolean 

ORM 

ID = int()
Text = string()
Date = date ()
Deleted = bool()
Struct (ID , Text, Deleted)


1  > ring recursion  "select on update set Deleted=True "
2  > select where Deleted not true 


2. deleteSkeleton - удаляет структуру (дерево) со всеми вложенными кольцами (помечает на удаление)
Вход:
User_ID 
Skeleton_ID - ID структуры
Выход:


3. createRing - создает кольцо в какой-то структуре. User_ID должен обязательно присутствовать в ParentRing_ID, иначе должна возникнуть ошибка
(createRing вызывает AddPower для владельца кольца)
Вход:
User_ID - кто создает кольцо
Skeleton_ID - в какой структуре создается кольцо
ParentRing_ID - от какого кольца наследоваться
Text - описание кольца 
ExpectedTime - если указана, выставляет время, которое планируется затратить на решение (устанавоивается для владельца Ring через PowerInRing_ID )
Выход:
Ring_ID - ID для вновь созданного кольца

4. deleteRing - удаляет кольцо. Если удаление рекурсивное, то удаляются все дочерние кольца согласно структуре. Без рекурсии, все дочерние кольца меняют ParentRing_ID на ParentRing_ID удаляемого кольца
Вход:
User_ID
Ring_ID - ID удаляемого кольца 
Recursion - YES/NO - рекурсивно удалять все дочерние кольца, или только указанное кольцо
ВЫход:

5. updateRingText - модифицирует текст в кольце
Вход:
User_ID
Ring_ID 
Text
Выход:

6. AddPower - добавляет сущность к кольцу
Вход:
Ring_ID 
User_ID - кто добавляет, должен обязательно присутствовать в указанном кольце, иначе должна быть ошибка
Power_ID - сущность, которая добавляется 
NextStep_ID - если не указана, то сущность добавляет в параллельном режиме и не блокирует выполнения работы другими Power юнитами. Если указан ID, то после выполнения работы этой сущностью, ответственность перейдет к NextStep_ID, который обязательно должен присутствовать в кольце. 
Comment - причина добавления, не может быть пустым 
ExpectedTime - если указана, выставляет время, которое планируется затратить на решение 
Выход:
PowerInRing_ID - ID сущности, в конкретном кольце, на случай, если будет добавленна одна и та же сущность в кольцо несколько раз



REST API состояния нет
http -> я использую кольцо 1


7. RemovePower - убирает сущность из кольца 
Вход:
User_ID - кто убирает 
PowerInRing_ID - что убирает
Выход:

7.5 ChangeExpectedTime - меняет ожидаемое времы выполнения работы сущностью
Вход:
PowerInRing_ID - кому задается время выполнения 
ExpectedTime - 0, если ожидаемое время не задано 
Comment - может быть пустой, если PowerInRing_ID меняет ожидаемое время сам для себя, иначе обязательно

8. AddComment - добавляет комментарий к кольцу под определенным Power юнитом
Вход:
Comment  
PowerInRing_ID - кто добавляет комментарий
Resolved - YES/NO - YES - если работа выполнена, и NO если работа еще не выполнена
Выход:
Comment_ID - ID комментария 

9. DeleteComment - удаляет комментарий 
Вход:
PowerInRing_ID - кто удаляет комментарий
Comment_ID - какой комментарий (владелец должен быть PowerInRing_ID)
Выход:

9.5 AttachSkeleton
9.6 DetachSkeleton
9.7 CreateTemplateFromSkeleton

10. CreateSkill - создает новый скилл в базе данных
Вход:
Text - текст или тег, по которому в будущем будет происходить поиск скила
Default - дефолтное значение, если не указано, то 0 
Выход:
Skill_ID - ID вновь созданного скила 

11. DeleteSkill

12. AttachSkill

13. CreateEntity

14. DeleteEntity

15. UpdateEntity



